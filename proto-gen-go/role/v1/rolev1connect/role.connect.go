// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: role/v1/role.proto

package rolev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/xdorro/proto-base-project/proto-gen-go/role/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RoleServiceName is the fully-qualified name of the RoleService service.
	RoleServiceName = "role.v1.RoleService"
)

// RoleServiceClient is a client for the role.v1.RoleService service.
type RoleServiceClient interface {
	FindAllRoles(context.Context, *connect_go.Request[v1.FindAllRolesRequest]) (*connect_go.Response[v1.FindAllRolesResponse], error)
	// Find Role by ID
	FindRoleByID(context.Context, *connect_go.Request[v1.CommonUUIDRequest]) (*connect_go.Response[v1.Role], error)
	// Create new Role
	CreateRole(context.Context, *connect_go.Request[v1.CreateRoleRequest]) (*connect_go.Response[v1.CommonResponse], error)
	// Update Role by ID
	UpdateRole(context.Context, *connect_go.Request[v1.UpdateRoleRequest]) (*connect_go.Response[v1.CommonResponse], error)
	// Delete Role
	DeleteRole(context.Context, *connect_go.Request[v1.CommonUUIDRequest]) (*connect_go.Response[v1.CommonResponse], error)
}

// NewRoleServiceClient constructs a client for the role.v1.RoleService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RoleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &roleServiceClient{
		findAllRoles: connect_go.NewClient[v1.FindAllRolesRequest, v1.FindAllRolesResponse](
			httpClient,
			baseURL+"/role.v1.RoleService/FindAllRoles",
			opts...,
		),
		findRoleByID: connect_go.NewClient[v1.CommonUUIDRequest, v1.Role](
			httpClient,
			baseURL+"/role.v1.RoleService/FindRoleByID",
			opts...,
		),
		createRole: connect_go.NewClient[v1.CreateRoleRequest, v1.CommonResponse](
			httpClient,
			baseURL+"/role.v1.RoleService/CreateRole",
			opts...,
		),
		updateRole: connect_go.NewClient[v1.UpdateRoleRequest, v1.CommonResponse](
			httpClient,
			baseURL+"/role.v1.RoleService/UpdateRole",
			opts...,
		),
		deleteRole: connect_go.NewClient[v1.CommonUUIDRequest, v1.CommonResponse](
			httpClient,
			baseURL+"/role.v1.RoleService/DeleteRole",
			opts...,
		),
	}
}

// roleServiceClient implements RoleServiceClient.
type roleServiceClient struct {
	findAllRoles *connect_go.Client[v1.FindAllRolesRequest, v1.FindAllRolesResponse]
	findRoleByID *connect_go.Client[v1.CommonUUIDRequest, v1.Role]
	createRole   *connect_go.Client[v1.CreateRoleRequest, v1.CommonResponse]
	updateRole   *connect_go.Client[v1.UpdateRoleRequest, v1.CommonResponse]
	deleteRole   *connect_go.Client[v1.CommonUUIDRequest, v1.CommonResponse]
}

// FindAllRoles calls role.v1.RoleService.FindAllRoles.
func (c *roleServiceClient) FindAllRoles(ctx context.Context, req *connect_go.Request[v1.FindAllRolesRequest]) (*connect_go.Response[v1.FindAllRolesResponse], error) {
	return c.findAllRoles.CallUnary(ctx, req)
}

// FindRoleByID calls role.v1.RoleService.FindRoleByID.
func (c *roleServiceClient) FindRoleByID(ctx context.Context, req *connect_go.Request[v1.CommonUUIDRequest]) (*connect_go.Response[v1.Role], error) {
	return c.findRoleByID.CallUnary(ctx, req)
}

// CreateRole calls role.v1.RoleService.CreateRole.
func (c *roleServiceClient) CreateRole(ctx context.Context, req *connect_go.Request[v1.CreateRoleRequest]) (*connect_go.Response[v1.CommonResponse], error) {
	return c.createRole.CallUnary(ctx, req)
}

// UpdateRole calls role.v1.RoleService.UpdateRole.
func (c *roleServiceClient) UpdateRole(ctx context.Context, req *connect_go.Request[v1.UpdateRoleRequest]) (*connect_go.Response[v1.CommonResponse], error) {
	return c.updateRole.CallUnary(ctx, req)
}

// DeleteRole calls role.v1.RoleService.DeleteRole.
func (c *roleServiceClient) DeleteRole(ctx context.Context, req *connect_go.Request[v1.CommonUUIDRequest]) (*connect_go.Response[v1.CommonResponse], error) {
	return c.deleteRole.CallUnary(ctx, req)
}

// RoleServiceHandler is an implementation of the role.v1.RoleService service.
type RoleServiceHandler interface {
	FindAllRoles(context.Context, *connect_go.Request[v1.FindAllRolesRequest]) (*connect_go.Response[v1.FindAllRolesResponse], error)
	// Find Role by ID
	FindRoleByID(context.Context, *connect_go.Request[v1.CommonUUIDRequest]) (*connect_go.Response[v1.Role], error)
	// Create new Role
	CreateRole(context.Context, *connect_go.Request[v1.CreateRoleRequest]) (*connect_go.Response[v1.CommonResponse], error)
	// Update Role by ID
	UpdateRole(context.Context, *connect_go.Request[v1.UpdateRoleRequest]) (*connect_go.Response[v1.CommonResponse], error)
	// Delete Role
	DeleteRole(context.Context, *connect_go.Request[v1.CommonUUIDRequest]) (*connect_go.Response[v1.CommonResponse], error)
}

// NewRoleServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoleServiceHandler(svc RoleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/role.v1.RoleService/FindAllRoles", connect_go.NewUnaryHandler(
		"/role.v1.RoleService/FindAllRoles",
		svc.FindAllRoles,
		opts...,
	))
	mux.Handle("/role.v1.RoleService/FindRoleByID", connect_go.NewUnaryHandler(
		"/role.v1.RoleService/FindRoleByID",
		svc.FindRoleByID,
		opts...,
	))
	mux.Handle("/role.v1.RoleService/CreateRole", connect_go.NewUnaryHandler(
		"/role.v1.RoleService/CreateRole",
		svc.CreateRole,
		opts...,
	))
	mux.Handle("/role.v1.RoleService/UpdateRole", connect_go.NewUnaryHandler(
		"/role.v1.RoleService/UpdateRole",
		svc.UpdateRole,
		opts...,
	))
	mux.Handle("/role.v1.RoleService/DeleteRole", connect_go.NewUnaryHandler(
		"/role.v1.RoleService/DeleteRole",
		svc.DeleteRole,
		opts...,
	))
	return "/role.v1.RoleService/", mux
}

// UnimplementedRoleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoleServiceHandler struct{}

func (UnimplementedRoleServiceHandler) FindAllRoles(context.Context, *connect_go.Request[v1.FindAllRolesRequest]) (*connect_go.Response[v1.FindAllRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("role.v1.RoleService.FindAllRoles is not implemented"))
}

func (UnimplementedRoleServiceHandler) FindRoleByID(context.Context, *connect_go.Request[v1.CommonUUIDRequest]) (*connect_go.Response[v1.Role], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("role.v1.RoleService.FindRoleByID is not implemented"))
}

func (UnimplementedRoleServiceHandler) CreateRole(context.Context, *connect_go.Request[v1.CreateRoleRequest]) (*connect_go.Response[v1.CommonResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("role.v1.RoleService.CreateRole is not implemented"))
}

func (UnimplementedRoleServiceHandler) UpdateRole(context.Context, *connect_go.Request[v1.UpdateRoleRequest]) (*connect_go.Response[v1.CommonResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("role.v1.RoleService.UpdateRole is not implemented"))
}

func (UnimplementedRoleServiceHandler) DeleteRole(context.Context, *connect_go.Request[v1.CommonUUIDRequest]) (*connect_go.Response[v1.CommonResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("role.v1.RoleService.DeleteRole is not implemented"))
}
